as.matrix(cbind(c(1,2,3,4),c(1,2,3,4)))
as.matrix(cbind(c(1692,1978,1884,2151,2519),c(68,102,110,112,154)))
matr = as.matrix(cbind(c(1692,1978,1884,2151,2519),c(68,102,110,112,154)))
corr(matr)
cor(matr)
cov(matr)
summary(matr)
plot(matr[1],matr[2])
plot(matr[,1],matr[,2])
lm(matr[,1] ~ matr[,2])
standardize(matr[,1] ~ matr[,2])
lm(matr[,1] ~ matr[,2])
cor(matr)
cov(matr)
summary(matr)
lm(matr[,1] ~ matr[,2])
cov(matr)
linmod = lm(matr[,1] ~ matr[,2])
linmod
summary(linmod)
?lines
linmod[1]
linmod$coefficients[1]
lines(linmod$coefficients[1],5*linmod$coefficients[2])
plot(matr[,1],matr[,2])
lines(linmod$coefficients[1],5*linmod$coefficients[2])
lines(linmod$coefficients[1],5*linmod$coefficients[2],col='blue')
plot(matr[,1],matr[,2])
lines(linmod$coefficients[1],5*linmod$coefficients[2],col='blue')
plot(matr[,2],matr[,1])
lines(linmod$coefficients[1],5*linmod$coefficients[2],col='blue')
inmod$coefficients[1]
linmod$coefficients[1]
lines(linmod$coefficients[1],5*linmod$coefficients[2],col='blue')
lines(988,2500)
lines(988,2500,col='red')
?lines
stats::lowess(cars)
plot(matr[,2],matr[,1])
cov(matr)
cor(matr)
cov(matr)
install.packages(KernSmooth)
install.packages(KernSmooth)
install.packages("KernSmooth")
require(KernSmooth)
x = c(98.12,138.8)
plot(x,y)
x = c(98.12,138.8)
y = c(184168,104095)
plot(x,y)
lm(x~y)
lm(y~x)
x = c(98.12,138.8,268.5)
y = c(184168,104095,95000)
plot(x,y)
lm(y~x)
plot(x,y,type='l')
lm(y~x^2)
z = seq(80,300,1000)
z = seq(80,300,by=1)
model$coef
model = lm(y~x^2)
c
model$coef
model$coef[1]
model$coef[[1]
model$coef[[1]]
model$coef[[1]]
model$coef[[1]] + z * model$coef[[2]]
reeks = model$coef[[1]] + z * model$coef[[2]]
lines(reeks)
reeks = model$coef[[1]] + z^2 * model$coef[[2]]
lines(reeks)
reeks
z^2
lines(reeks)
lines(reeks,col='red')
x = c(98.12,138.8,268.5)
y = c(184168,104095,95000)
plot(x,y,type='l')
model = lm(y~x^2)
z = seq(80,300,by=1)
reeks = model$coef[[1]] + z^2 * model$coef[[2]]
lines(reeks,col='red')
model
summary(model)
model = lm(y~1/x)
summary(model)
model = lm(y~x^-1)
model = lm(y~x^(-1))
x1 = 1/x
model = lm(y~x1)
summary(model)
z = seq(80,300,by=1)
reeks = model$coef[[1]] + z/1 * model$coef[[2]]
reeks = model$coef[[1]] + z/1 * model$coef[[2]]
lines(reeks,col='red')
z1 = 1/z
reeks = model$coef[[1]] + z1 * model$coef[[2]]
lines(reeks,col='red')
model$residuals
model$fitted.values
lines(model$fitted.values,col='red')
x = c(98.12,138.8,268.5)
y = c(184168,104095,95000)
x1 = 1/x
plot(x,y,type='l')
model = lm(y~x1)
summary(model)
lines(model$fitted.values,col='red')
model$fitted.values
lines(model$['fitted.values'],col='red')
lines(model$fitted.values,col='red')
zz = model$fitted.values
zz
pints(model$fitted.values,col='red')
points(model$fitted.values,col='red')
lines(model$fitted.values,col='red')
model$fitted.values
lines(zz,col='red')
zz = model$fitted.values
c(170243.29,129970.98,83048.73)
lines(c(170243.29,129970.98,83048.73)
,col='red')
lines(180000,100000,col='red')
model$fitted.values
model$residuals
plot(y,model$fitted.values)
plot(x,model$fitted.values)
lines(x,y)
lines(x,model$fitted.values)
lines(x,model$fitted.values,col='red')
x = c(98.12,138.8,268.5)
y = c(184168,104095,95000)
x1 = 1/x
plot(x,y,type='l')
model = lm(y~x1)
summary(model)
lines(x,model$fitted.values,col='red')
model = lm(y~x+x1)
x = c(98.12,138.8,268.5)
y = c(184168,104095,95000)
x1 = 1/x
plot(x,y,type='l')
model = lm(y~x+x1)
summary(model)
lines(x,model$fitted.values,col='red')
model$fitted.values
model$residuals
x = c(98.12,138.8,268.5)
y = c(184168,104095,95000)
x1 = 1/x
plot(x,y,type='l')
model = lm(y~x+x1)
summary(model)
lines(x,model$fitted.values,col='red')
model$fitted.values
model$residuals
x+x1
x
x1
plot(x,y,type='l')
model = lm(y~x+x1)
summary(model)
lines(x,model$fitted.values,col='red')
model$fitted.values
model$residuals
x = c(98.12,138.8,268.5,117.83)
y = c(184168,104095,95000,95000)
x1 = 1/x
plot(x,y,type='l')
model = lm(y~x+x1)
summary(model)
lines(x,model$fitted.values,col='red')
model$fitted.values
model$residuals
x = c(98.12,138.8,268.5,117.83)
y = c(184168,104095,95000,95000)
x1 = 1/x
plot(x,y,type='l')
model = lm(y~x+x1)
summary(model)
lines(x,model$fitted.values,col='red')
plot(x,y,type='l')
sort(x)
x = c(98.12,138.8,268.5,117.83)
y = c(184168,104095,95000,95000)
x = c(98.12,117.83,138.8,268.5)
y = c(184168,95000,104095,95000)
x1 = 1/x
plot(x,y,type='l')
model = lm(y~x+x1)
summary(model)
lines(x,model$fitted.values,col='red')
model$fitted.values
library(datasets)
data(iris)
colMeans(iris)
colMeans(iris)
colMeans(as.matrix(iris))
View(iris)
colMeans(as.matrix(iris[,1:4]))
split(iris,iris$Species)
colMeans(split(iris,iris$Species))
lapply(split(iris,iris$Species),colMeans)
apply(split(iris,iris$Species),2,colMeans)
apply(split(iris,iris$Species),2,mean)
apply(split(iris,iris$Species),mean)
lapply(split(iris,iris$Species),mean)
lapply(split(iris,iris$Species),colMeans)
lapply(split(iris,iris$Species),FUN = function(x){colMeans(as.matrix(x))})
lapply(split(iris,iris$Species),function(x){colMeans(as.matrix(x))})
split(iris,iris$Species)
lapply(split(iris,iris$Species),function(x){colMeans(as.matrix(x[1:4,]))})
lapply(split(iris,iris$Species),function(x){colMeans(as.matrix(x[,1:4]))})
lapply(split(iris,iris$Species),function(x){colMeans(as.matrix(x[,1:4]))})
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)[1]
test = tapply(mtcars$hp, mtcars$cyl, mean)
test[1]
test[1] - test[3]
debug(ls)
ls()
lapply(split(iris,iris$Species),function(x){colMeans(as.matrix(x[,1:4]))})
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
test[1] - test[3]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x = c(1,2,3,4,5)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
x = c(1,2,3,4,5)
makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x = c(1,2,3,4,5)
makeVector(x)
cachemean(x)
cachemean(makeVector(x))
y = list(1,5,a,6,7)
y = list(1,5,'a',6,7)
cachemean(makeVector(y))
cachemean(makeVector(x))
cachemean(makeVector(x))
x = c(1,2,3,3,5)
cachemean(makeVector(x))
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
x = matrix
View(x)
View(x)
makeCacheMatrix <- function(x = matrix()) {
##cache inverse
inverse <- NULL
#set the matrix
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInv <- function(inv) inverse <<- inv
getInv <- function() inverse
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
x = matrix(1:9)
x = matrix(1:9,nrow = 3)
x
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInv()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
m <- solve(data, ...)
x$setInv(inverse)
inverse
}
makeCacheMatrix(x)
cacheSolve(x)
z = makeCacheMatrix(x)
cacheSolve(z)
x = matrix(c(1,4,5,6,7,8,1,3,5),nrow = 3)
x
z = makeCacheMatrix(x)
z
cacheSolve(z)
x = matrix(c(1,4,5,6,7,8,1,3,5),nrow = 3)
x
z = makeCacheMatrix(x)
z
cacheSolve(z)
solve(x)
z = makeCacheMatrix(x)
z
x=z
inverse <- x$getInv()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
m <- solve(data, ...)
data <- x$get()
inverse <- solve(data, ...)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInv()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setInv(inverse)
inverse
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInv()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setInv(inverse)
inverse
}
x = matrix(c(1,4,5,6,7,8,1,3,5),nrow = 3)
x
z = makeCacheMatrix(x)
z
cacheSolve(z)
x = matrix(c(1,4,5,6,7,8,1,3,5),nrow = 3)
z = makeCacheMatrix(x)
cacheSolve(z)
cacheSolve(z)
cacheSolve(z)
f = matrix(c(1,3,5,6,7,8,9,3,5),nrow = 3)
h = makeCacheMatrix(f)
cacheSolve(h)
cacheSolve(z)
cacheSolve(h)
cacheSolve(h)
cacheSolve(h)
cacheSolve(z)
cacheSolve(h)
x = matrix(c(1,4,5,6,7,8,1,3,5),nrow = 3)
f = matrix(c(1,3,5,6,7,8,9,3,5),nrow = 3)
z = makeCacheMatrix(x)
h = makeCacheMatrix(f)
cacheSolve(z)
cacheSolve(h)
cacheSolve(z)
cacheSolve(h)
z = makeCacheMatrix(x)
h = makeCacheMatrix(f)
cacheSolve(z)
cacheSolve(h)
cacheSolve(z)
cacheSolve(h)
TestMatrix <- matrix(5:21,4,4)
TestMatrix <- matrix(54:21,4,4)
TestMatrix <- matrix(4:21,4,4)
TestMatrix <- matrix(3:21,4,4)
TestMatrix <- matrix(2:21,4,4)
TestMatrix
CacheMatrix <- makeCacheMatrix(TestMatrix)
CacheMatrix$getMatrix()
CacheMatrix$getInverse()
cacheSolve(CacheMatrix)
cacheSolve(CacheMatrix)
library(sqldf)
install.packages(sqldf)
install.packages("sqldf)
install.packages("sqldf")
install.packages("sqldf")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
x = download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
x = download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","week2.csv")
read.csv("week2.csv")
df = read.csv("week2.csv")
View(df)
library(httr)
r <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
r$content
r$headers
content(r, "text")
htmlUrl <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(htmlUrl)
close(htmlUrl)
htmlCode
laplly(htmlCode[c(10,20,30,100)],nchar)
lapply(htmlCode[c(10,20,30,100)],nchar)
sapply(htmlCode[c(10,20,30,100)],nchar)
apply(htmlCode[c(10,20,30,100)],nchar)
lapply(htmlCode[c(10,20,30,100)],nchar)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
SST <- read.fwf(fileUrl, skip=4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
View(SST)
SST <- read.fwf(fileUrl, skip=4, widths=c(10, 7, 4, 9, 4, 9, 4, 9, 4))
View(SST)
sum(SST[,4])
SST <- read.fwf(fileUrl, skip=4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
sum(SST[,4])
## Run analysis for final project Getting and cleaning data
# load packages
install_load =function (package1, ...){
packages =c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load("reshape","reshape")
# set working directory
setwd("~/3. Trainingen/Coursera course/Getting and Cleaning Data/Final project")
# Merge the training and the test sets to create one data set.
# Load subjects
subjectTest = read.table("UCI HAR Dataset/test/subject_test.txt")
subjectTrain = read.table("UCI HAR Dataset/train/subject_train.txt")
# Load X sets
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
X_test = read.table("UCI HAR Dataset/test/X_test.txt")
# Load Y sets
Y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
Y_test = read.table("UCI HAR Dataset/test/Y_test.txt")
# Merge train and test sets
subject = rbind(subjectTest,subjectTrain)
colnames(subject) = "subject"
X = rbind(X_test,X_train)
Y = rbind(Y_test,Y_train)
colnames(Y) = "activity"
# Extracts only the measurements on the mean and standard deviation for each measurement.
# load feature names
features = read.table("UCI HAR Dataset/features.txt")
#set names of df
colnames(X) = features[,2]
#list of selected variables and selection in dataframe
selVar = grep(pattern = "std\\(\\)|mean\\(\\)", x = features[,2])
interested_var = as.character(features[selVar,2])
X_sub = X[,interested_var]
# Uses descriptive activity names to name the activities in the data set
activities = read.table("UCI HAR Dataset/activity_labels.txt")
Y_comb = merge(Y,activities, by.x = "activity", by.y = "V1")
colnames(Y_comb) = c("activity","activity_name")
# Appropriately labels the data set with descriptive variable names.
df = cbind(subject,X_sub,Y_comb)
#check missing values (good)
which(is.na(df))
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
avg_subj_activity = aggregate(df[,2:(ncol(df)-2)], by = df[,c(1,ncol(df))],mean)
head(avg_subj_activity)
write.table(avg_subj_activity,row.names=FALSE)
write.table(avg_subj_activity,file = "finalproject_GettingCleaningData",row.names=FALSE)
View(df)
