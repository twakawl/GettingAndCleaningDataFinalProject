tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)[1]
test = tapply(mtcars$hp, mtcars$cyl, mean)
test[1]
test[1] - test[3]
debug(ls)
ls()
lapply(split(iris,iris$Species),function(x){colMeans(as.matrix(x[,1:4]))})
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
test[1] - test[3]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x = c(1,2,3,4,5)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
x = c(1,2,3,4,5)
makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x = c(1,2,3,4,5)
makeVector(x)
cachemean(x)
cachemean(makeVector(x))
y = list(1,5,a,6,7)
y = list(1,5,'a',6,7)
cachemean(makeVector(y))
cachemean(makeVector(x))
cachemean(makeVector(x))
x = c(1,2,3,3,5)
cachemean(makeVector(x))
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
x = matrix
View(x)
View(x)
makeCacheMatrix <- function(x = matrix()) {
##cache inverse
inverse <- NULL
#set the matrix
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInv <- function(inv) inverse <<- inv
getInv <- function() inverse
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
x = matrix(1:9)
x = matrix(1:9,nrow = 3)
x
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInv()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
m <- solve(data, ...)
x$setInv(inverse)
inverse
}
makeCacheMatrix(x)
cacheSolve(x)
z = makeCacheMatrix(x)
cacheSolve(z)
x = matrix(c(1,4,5,6,7,8,1,3,5),nrow = 3)
x
z = makeCacheMatrix(x)
z
cacheSolve(z)
x = matrix(c(1,4,5,6,7,8,1,3,5),nrow = 3)
x
z = makeCacheMatrix(x)
z
cacheSolve(z)
solve(x)
z = makeCacheMatrix(x)
z
x=z
inverse <- x$getInv()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
m <- solve(data, ...)
data <- x$get()
inverse <- solve(data, ...)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInv()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setInv(inverse)
inverse
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInv()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setInv(inverse)
inverse
}
x = matrix(c(1,4,5,6,7,8,1,3,5),nrow = 3)
x
z = makeCacheMatrix(x)
z
cacheSolve(z)
x = matrix(c(1,4,5,6,7,8,1,3,5),nrow = 3)
z = makeCacheMatrix(x)
cacheSolve(z)
cacheSolve(z)
cacheSolve(z)
f = matrix(c(1,3,5,6,7,8,9,3,5),nrow = 3)
h = makeCacheMatrix(f)
cacheSolve(h)
cacheSolve(z)
cacheSolve(h)
cacheSolve(h)
cacheSolve(h)
cacheSolve(z)
cacheSolve(h)
x = matrix(c(1,4,5,6,7,8,1,3,5),nrow = 3)
f = matrix(c(1,3,5,6,7,8,9,3,5),nrow = 3)
z = makeCacheMatrix(x)
h = makeCacheMatrix(f)
cacheSolve(z)
cacheSolve(h)
cacheSolve(z)
cacheSolve(h)
z = makeCacheMatrix(x)
h = makeCacheMatrix(f)
cacheSolve(z)
cacheSolve(h)
cacheSolve(z)
cacheSolve(h)
TestMatrix <- matrix(5:21,4,4)
TestMatrix <- matrix(54:21,4,4)
TestMatrix <- matrix(4:21,4,4)
TestMatrix <- matrix(3:21,4,4)
TestMatrix <- matrix(2:21,4,4)
TestMatrix
CacheMatrix <- makeCacheMatrix(TestMatrix)
CacheMatrix$getMatrix()
CacheMatrix$getInverse()
cacheSolve(CacheMatrix)
cacheSolve(CacheMatrix)
library(sqldf)
install.packages(sqldf)
install.packages("sqldf)
install.packages("sqldf")
install.packages("sqldf")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
x = download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
x = download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","week2.csv")
read.csv("week2.csv")
df = read.csv("week2.csv")
View(df)
library(httr)
r <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
r$content
r$headers
content(r, "text")
htmlUrl <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(htmlUrl)
close(htmlUrl)
htmlCode
laplly(htmlCode[c(10,20,30,100)],nchar)
lapply(htmlCode[c(10,20,30,100)],nchar)
sapply(htmlCode[c(10,20,30,100)],nchar)
apply(htmlCode[c(10,20,30,100)],nchar)
lapply(htmlCode[c(10,20,30,100)],nchar)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
SST <- read.fwf(fileUrl, skip=4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
View(SST)
SST <- read.fwf(fileUrl, skip=4, widths=c(10, 7, 4, 9, 4, 9, 4, 9, 4))
View(SST)
sum(SST[,4])
SST <- read.fwf(fileUrl, skip=4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
sum(SST[,4])
install_load =function (package1, ...){
packages =c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load("reshape","reshape")
setwd("~/3. Trainingen/Coursera course/Getting and Cleaning Data/Final project")
subjectText = read.table("UCI HAR Dataset\test\subject_test.txt")
subjectTrain =
subjectText = read.table("UCI HAR Dataset/test/subject_test.txt")
subjectTrain =
subjectTest = read.table("UCI HAR Dataset/test/subject_test.txt")
subjectTrain =
subjectTest = read.table("UCI HAR Dataset/test/subject_test.txt")
View(subjectTest)
## Run analysis for final project Getting and cleaning data
# load packages
install_load =function (package1, ...){
packages =c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load("reshape","reshape")
# set working directory
setwd("~/3. Trainingen/Coursera course/Getting and Cleaning Data/Final project")
# Merge the training and the test sets to create one data set.
# Load subjects
subjectTest = read.table("UCI HAR Dataset/test/subject_test.txt")
subjectTrain = read.table("UCI HAR Dataset/train/subject_train.txt")
# Load X sets
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
## Run analysis for final project Getting and cleaning data
# load packages
install_load =function (package1, ...){
packages =c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load("reshape","reshape")
# set working directory
setwd("~/3. Trainingen/Coursera course/Getting and Cleaning Data/Final project")
# Merge the training and the test sets to create one data set.
# Load subjects
subjectTest = read.table("UCI HAR Dataset/test/subject_test.txt")
subjectTrain = read.table("UCI HAR Dataset/train/subject_train.txt")
# Load X sets
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
X_test = read.table("UCI HAR Dataset/test/X_test.txt")
# Load Y sets
Y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
Y_test = read.table("UCI HAR Dataset/test/Y_test.txt")
# Merge sets with
subject = rbind(subjectTest,subjectTrain)
subject = rbind(subjectTest,subjectTrain)
X = rbind(X_test,X_train)
Y = rbind(Y_test,Y_train)
View(Y)
View(X_test)
colnames(subject)
colnames(subject) = "subject"
colnames(Y) = "activity"
colnames(X)
features = read.table("UCI HAR Dataset/features.txt")
View(features)
gsub(featurs[,2],"mean")
?gsub
gsub("mean",features[,2])
gsub(pattern = "mean", x = features[,2])
grep(pattern = "mean", x = features[,2])
grepl(pattern = "mean", x = features[,2])
grep(pattern = "mean", x = features[,2])
means = features[allmeans,]
allmeans = grep(pattern = "mean", x = features[,2])
means = features[allmeans,]
View(means)
allmeans = grep(pattern = "mean()", x = features[,2])
means = features[allmeans,]
means
allmeans = grep(pattern = "mean()", x = features[,2])
means = features[allmeans,]
allmeans
allmeans
means = features[allmeans,]
means
allmeans
allmeans = grep(pattern = "mean\(\)", x = features[,2])
allmeans = grep(pattern = "mean\\(\\)", x = features[,2])
means = features[allmeans,]
allmeans
means = features[allmeans,]
means
features
allstdev = grep(pattern = "std\\(\\)", x = features[,2])
means = features[allstdev,]
means
interested_var = features[c(allmeans,allstdev),]
interested_var
interested_var = features[c(allmeans,allstdev),2]
interested_var
colnames(X) = features[,2]
View(X)
test = grep(pattern = "std\\(\\)|mean\\(\\)", x = features[,2])
test
length(test)
grep(pattern = "std\\(\\)|mean\\(\\)", x = features[,2])
grepl(pattern = "std\\(\\)|mean\\(\\)", x = features[,2])
interested_var = features[selVar,2]
interested_var
selVar
selVar = grep(pattern = "std\\(\\)|mean\\(\\)", x = features[,2])
selVar
interested_var = features[selVar,2]
selVar = grep(pattern = "std\\(\\)|mean\\(\\)", x = features[,2])
interested_var = features[selVar,2]
df = X[,interested_var]
df
activities = read.table("UCI HAR Dataset/activities.txt")
activities = read.table("UCI HAR Dataset/activity_labels.txt")
View(activities)
head(Y)
table(Y)
merge(Y,activies)
activities = read.table("UCI HAR Dataset/activity_labels.txt")
merge(Y,activities)
head(Y)
head(activities)
activities = read.table("UCI HAR Dataset/activity_labels.txt")
merge(Y,activities, by.x = "activity", by.y = "V2")
y$actvity
y$activity
Y$activity
activities$V2
activities$V1
merge(Y,activities, by.x = "activity", by.y = "V1")
colnames(X)
colnames(df)
selVar
interested_var = features[selVar,2]
df = X[,interested_var]
colnames(df)
selVar
c(allMeans,allstdev)
c(allmeans,allstdev)
order(c(allmeans,allstdev))
sort(c(allmeans,allstdev))
sort(c(allmeans,allstdev)) == selVar
selVar
interested_var
df = X[,interested_var]
df
head(df)
interested_var
X[,"tBodyAcc-mean()-X "]
X[,"tBodyAcc-mean()-X"]
interested_var
X[,c("tBodyAcc-mean()-X","tBodyAcc-mean()-Y")]
head(X[,c("tBodyAcc-mean()-X","tBodyAcc-mean()-Y")])
head(X[,interested_var[1:2]])
interested_var[1:2]
interested_var = as.character(features[selVar,2])
df = X[,interested_var]
head(df)
colnames(df)
subjectTest
View(subject)
rbind(subject,df,Y_comb)
## Run analysis for final project Getting and cleaning data
# load packages
install_load =function (package1, ...){
packages =c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load("reshape","reshape")
# set working directory
setwd("~/3. Trainingen/Coursera course/Getting and Cleaning Data/Final project")
# Merge the training and the test sets to create one data set.
# Load subjects
subjectTest = read.table("UCI HAR Dataset/test/subject_test.txt")
subjectTrain = read.table("UCI HAR Dataset/train/subject_train.txt")
# Load X sets
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
X_test = read.table("UCI HAR Dataset/test/X_test.txt")
# Load Y sets
Y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
Y_test = read.table("UCI HAR Dataset/test/Y_test.txt")
# Merge train and test sets
subject = rbind(subjectTest,subjectTrain)
colnames(subject) = "subject"
X = rbind(X_test,X_train)
Y = rbind(Y_test,Y_train)
colnames(Y) = "activity"
# Extracts only the measurements on the mean and standard deviation for each measurement.
# load feature names
features = read.table("UCI HAR Dataset/features.txt")
#set names of df
colnames(X) = features[,2]
#list of selected variables and selection in dataframe
selVar = grep(pattern = "std\\(\\)|mean\\(\\)", x = features[,2])
interested_var = as.character(features[selVar,2])
df = X[,interested_var]
# Uses descriptive activity names to name the activities in the data set
activities = read.table("UCI HAR Dataset/activity_labels.txt")
Y_comb = merge(Y,activities, by.x = "activity", by.y = "V1")
# Appropriately labels the data set with descriptive variable names.
rbind(subject,df,Y_comb)
rbind(subject,Y_comb)
cbind(subject,df,Y_comb)
colnames(Y_comb)
# Uses descriptive activity names to name the activities in the data set
activities = read.table("UCI HAR Dataset/activity_labels.txt")
Y_comb = merge(Y,activities, by.x = "activity", by.y = "V1")
colnames(Y_comb) = c("activity","activity_name")
df = X[,interested_var]
# Merge train and test sets
subject = rbind(subjectTest,subjectTrain)
colnames(subject) = "subject"
X = rbind(X_test,X_train)
Y = rbind(Y_test,Y_train)
colnames(Y) = "activity"
# Extracts only the measurements on the mean and standard deviation for each measurement.
# load feature names
features = read.table("UCI HAR Dataset/features.txt")
#set names of df
colnames(X) = features[,2]
#list of selected variables and selection in dataframe
selVar = grep(pattern = "std\\(\\)|mean\\(\\)", x = features[,2])
interested_var = as.character(features[selVar,2])
X_sub = X[,interested_var]
# Uses descriptive activity names to name the activities in the data set
activities = read.table("UCI HAR Dataset/activity_labels.txt")
Y_comb = merge(Y,activities, by.x = "activity", by.y = "V1")
colnames(Y_comb) = c("activity","activity_name")
# Appropriately labels the data set with descriptive variable names.
df = cbind(subject,X_sub,Y_comb)
View(df)
colnames(df)
is.na(df)
which(is.na(df))
colnames(df)
cast(df, subject + activity_name ~ tBodyAcc-std()-X)
cast(df, subject + activity_name ~ "tBodyAcc-std()-X")
aggregate(df$subject, mean)
aggregate(df$subject, df[,-"subject"] mean)
aggregate(df$subject, df[,-"subject"] ,mean)
colnames(df)
aggregate(df[2:(ncol(df)-2)], by = list("subject","activity_name"),mean)
c(1,ncol(df))
df[,c(1,ncol(df))]
aggregate(df[,2:(ncol(df)-2)], by = df[,c(1,ncol(df))],mean)
avg_subj_activity = aggregate(df[,2:(ncol(df)-2)], by = df[,c(1,ncol(df))],mean)
head(avg_subj_activity)
View(avg_subj_activity)
